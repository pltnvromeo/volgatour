# Приведение расширенной матрицы к верхней треугольной виду методом Гаусса.
def up_triangle(A, b, n):
    for i in range(n):
        for j in range(i + 1, n):
            # Вычисление множителя для текущей строки
            coef = A[j][i] / A[i][i]
            # Преобразование элементов текущей строки и вектора свободных членов
            for k in range(i, n):
                A[j][k] -= A[i][k] * coef
            b[j] -= b[i] * coef

#Вычисление решения системы линейных уравнений методом обратной подстановки.
def vect_x(n, A, b):
    x = [0] * n
    # Начинаем с последней строки системы и находим решение для каждого уравнения
    x[n - 1] = b[n - 1] / A[n - 1][n - 1]
    for i in range(n - 2, -1, -1):
        # Вычисление суммы с уже найденными значениями
        sum_val = sum(A[i][j] * x[j] for j in range(i + 1, n))
        # Вычисление значения текущей переменной
        x[i] = (b[i] - sum_val) / A[i][i]
    return x

def main():
    n = int(input("Введите размерность матрицы: "))

    print("Введите коэффициенты матрицы A и вектор b:")

    # Ввод коэффициентов матрицы A и вектора b
    A = []
    b = []
    for _ in range(n):
        row = list(map(float, input().split()))
        A.append(row[:-1])  # Коэффициенты матрицы A
        b.append(row[-1])   # Вектор b

    # Приведение расширенной матрицы к верхнетреугольному виду
    up_triangle(A, b, n)
    # Вычисление решения системы линейных уравнений
    x = vect_x(n, A, b)

    # Вывод решения системы
    print("\nРешение системы линейных алгебраических уравнений:")
    for i in range(n):
        print(f"x[{i + 1}] = {round(x[i], 10)}")  # Округление результата до 10 знаков после запятой

main()

